# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ObstaclePoint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObstaclePoint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsObstaclePoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ObstaclePoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObstaclePoint
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ObstaclePoint
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def Start(builder): builder.StartObject(2)
def ObstaclePointStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddX(builder, x): builder.PrependFloat32Slot(0, x, 0.0)
def ObstaclePointAddX(builder, x):
    """This method is deprecated. Please switch to AddX."""
    return AddX(builder, x)
def AddY(builder, y): builder.PrependFloat32Slot(1, y, 0.0)
def ObstaclePointAddY(builder, y):
    """This method is deprecated. Please switch to AddY."""
    return AddY(builder, y)
def End(builder): return builder.EndObject()
def ObstaclePointEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)