# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NavData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NavData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNavData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NavData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NavData
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # NavData
    def Pose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from Pose2D import Pose2D
            obj = Pose2D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NavData
    def Obstacles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ObstaclePoint import ObstaclePoint
            obj = ObstaclePoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NavData
    def ObstaclesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NavData
    def ObstaclesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # NavData
    def Path(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from PathPoint import PathPoint
            obj = PathPoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NavData
    def PathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NavData
    def PathIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def Start(builder): builder.StartObject(4)
def NavDataStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddTimestamp(builder, timestamp): builder.PrependFloat64Slot(0, timestamp, 0.0)
def NavDataAddTimestamp(builder, timestamp):
    """This method is deprecated. Please switch to AddTimestamp."""
    return AddTimestamp(builder, timestamp)
def AddPose(builder, pose): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pose), 0)
def NavDataAddPose(builder, pose):
    """This method is deprecated. Please switch to AddPose."""
    return AddPose(builder, pose)
def AddObstacles(builder, obstacles): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(obstacles), 0)
def NavDataAddObstacles(builder, obstacles):
    """This method is deprecated. Please switch to AddObstacles."""
    return AddObstacles(builder, obstacles)
def StartObstaclesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NavDataStartObstaclesVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartObstaclesVector(builder, numElems)
def AddPath(builder, path): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0)
def NavDataAddPath(builder, path):
    """This method is deprecated. Please switch to AddPath."""
    return AddPath(builder, path)
def StartPathVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NavDataStartPathVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartPathVector(builder, numElems)
def End(builder): return builder.EndObject()
def NavDataEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)